분할 정복 문제는 어떻게 함수를 만들어야할지 결정해야함. 함수 내에서는 작은 문제를 어떻게 호출해야 할지 결정하고

만약에 부분 문제의 정답을 합쳐야 하는 경우에는 합치는 것을 어떻게 할지 결정해야함


0,0 부터 가로n개 세로 n개의 종이 개수를 확인하는 함수를 짜도록 함 solve(0,0,n) ->

(x,y)부터 가로로 n개 세로로 n개 종이 개수를 확인하는 함수 solve(x,y,n)

작은 부분 문제는 총 9개이므로 m=n/3했을때 부분문제를 나누어봄


부분 문제를 호출하기 전에 같은 수로 되어있는지를 확인해야함. 그게 아니면 부분 문제를 호출함

 

import java.io.*;

import java.util.*;


public class Main {

 

  public static boolean same(int[][] a, int x, int y, int n) {

 

        for (int i=x; i<x+n; i++) {

 

            for (int j=y; j<y+n; j++) {

 

                if (a[x][y] != a[i][j]) {

 

                    return false;

 

                }

 

            }

 

        }

 

        return true;

 

    }

 

    public static void solve(int[][] a, int[] cnt, int x, int y, int n) {

 

        if (same(a, x, y, n)) {

 

            cnt[a[x][y]+1] += 1;

 

            return;

 

        }

 

        int m = n/3;

 

        for (int i=0; i<3; i++) {

 

            for (int j=0; j<3; j++) {

 

                solve(a, cnt, x+i*m, y+j*m, m);

 

            }

 

        }

 

    }

 

    public static void main(String args[]) throws IOException {

 

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

 

        int n = Integer.valueOf(br.readLine());

 

        int[][] a = new int[n][n];

 

        int[] cnt = new int[3];

 

        for (int i=0; i<n; i++) {

 

            String[] line = br.readLine().split(" ");

 

            for (int j=0; j<n; j++) {

 

                a[i][j] = Integer.valueOf(line[j]);

 

            }

 

        }

 

        solve(a, cnt, 0, 0, n);

 

        for (int i=0; i<3; i++) {

 

            System.out.println(cnt[i]);

 

        }

 

    }

 

}



출처: https://iji-stance.tistory.com/13 [Kozixzxc]
